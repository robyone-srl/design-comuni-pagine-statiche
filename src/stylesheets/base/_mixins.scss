@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.2, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);
  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
  @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  }
  @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);
  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
  @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  }
  @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

/* Helper classes for margins */
$sizes: 10, 15, 20, 25, 30, 35, 40, 50, 60, 70, 80, 90, 100;
$deviceTypes: ("initial":"", "mobile":"sm", "tablet":"md", "tablet-land":"lg", "deaktop":"xl");
$marginDirections: ("mt":"margin-top","ml":"margin-left","mr":"margin-right","mb":"margin-bottom");
$paddingDirections: ("pt":"padding-top","pl":"padding-left","pr":"padding-right","pb":"padding-bottom");

@each $name,$type in $deviceTypes {
	@if($name == "initial"){
		@each $prefix,$property in $marginDirections {
			@each $size in $sizes {
				.#{$prefix}-#{$size}{
					#{$property}: #{$size}px !important;
				}
			}
		}
	}
	@else{
		@include media-breakpoint-up(#{$type}){
			@each $prefix,$property in $marginDirections {
				@each $size in $sizes {
					.#{$prefix}-#{$type}-#{$size}{
						#{$property}: #{$size}px !important;
					}
				}
			}
		}
	}
}

@each $name,$type in $deviceTypes {
	@if($name == "mobile"){
		@each $prefix,$property in $paddingDirections {
			@each $size in $sizes {
				.#{$prefix}-#{$size}{
					#{$property}: #{$size}px !important;
				}
			}
		}
	}
	@else{
		@include media-breakpoint-up(#{$type}){
			@each $prefix,$property in $paddingDirections {
				@each $size in $sizes {
					.#{$prefix}-#{$type}-#{$size}{
						#{$property}: #{$size}px !important;
					}
				}
			}
		}
	}
}


@mixin color-modifiers($map, $attribute, $prefix: '-', $separator: '-', $base: 'base') {
  @each $key, $value in $map {
    &#{if($key != $base, #{$prefix}#{$key}, '')} {
      @if type-of($value) == 'map' {
        @include color-modifiers($value, $attribute, $separator);
      }
      @else {
        #{$attribute}: $value;
      }
    }
  }
}
@mixin bg-gradient($parent, $gradient) {
  #{$parent} {
    background: $gradient;
  }
}

.bg {
  @include color-modifiers($ca-colors, 'background', $separator: '-');
}
.u {
  @include color-modifiers($ca-colors, 'color', $separator: '-');
}
@mixin only-ie() {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content;
  }
}
@mixin shadowRadiusBgWhite() {
  border-radius: 16px;
  box-shadow: 11px 32px 63px 0 rgba(0, 0, 0, 0.1);
  background-color: #fff;
  overflow:hidden;
}

@mixin font($sizeMob, $sizeDsk) {
  font-size: calc($sizeMob/16) + rem;
  @media (min-width: 576px) {
    font-size: calc($sizeDsk/16) + rem;
  }
}
